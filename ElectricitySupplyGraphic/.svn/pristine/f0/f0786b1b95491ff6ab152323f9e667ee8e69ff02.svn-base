using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MetroStopStation
{
    /// <summary>
    /// GraphicPanelControl.xaml 的交互逻辑
    /// </summary>
    public partial class GraphicPanelControl : UserControl
    {
        AdornerLayer drawCanvasAdornerLayer;
        ResizeMoveAdorner resizeMoveAdorner = null;

        Point? mouseLeftButtonDownPoint = null;

        Line tempLine = null;
        Polyline tempLLinePolyline = null;
        Label tempLabel = null;
        ToggleButton tempToggleButton = null;
        FrameworkElement selectedUIElement = null;
        TextBox nameInputTextBox = null;

        Point canvasMoveTempPoint = new Point(0, 0);
        private string copyedUIElementString = null;

        public GraphicPanelControl()
        {
            InitializeComponent();
        }

        public GraphicPanelControl(ScrollViewer scrollViewer)
        {
            InitializeComponent();
            userControlGrid.Children.Clear();
            userControlGrid.Children.Add(scrollViewer);
            drawCanvas = null;
            drawCanvas = scrollViewer.Content as ZoomableCanvas;
            drawCanvas.MouseLeftButtonDown += DrawCanvas_MouseLeftButtonDown;
            drawCanvas.MouseMove += DrawCanvas_MouseMove;
            drawCanvas.MouseLeftButtonUp += DrawCanvas_MouseLeftButtonUp;
            drawCanvas.KeyDown += drawCanvas_KeyDown;
        }

        private void DrawCanvas_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //添加设备名称时点击鼠标移出输入框         
            if (null != nameInputTextBox)
            {
                drawCanvas.Children.Remove(nameInputTextBox);
                nameInputTextBox = null;
            }

            mouseLeftButtonDownPoint = e.GetPosition(drawCanvas);

            ToolItem toolItem = ToolManager.GetInstance().Tools.Find(item => item.IsSelected);
            if (null != toolItem)
            {
                if (toolItem.ToolType == ToolType.ItemSelect)
                {
                    Point moseDownPoint = (Point)mouseLeftButtonDownPoint;
                    ModifyElement(moseDownPoint);

                    if (e.ClickCount == 2 && null != selectedUIElement)
                    {
                        if (IsClickInUIElement(moseDownPoint, selectedUIElement) && selectedUIElement is ToggleButton)
                        {
                            AddElementName();
                        }
                    }
                }

                if (toolItem.ToolType == ToolType.CanvasMove)
                {
                    ClearResizeMoveAdorner();
                }
            }
        }

        private void DrawCanvas_MouseMove(object sender, MouseEventArgs e)
        {
            ////放大的时候移动画布
            //if (null != canvasMoveTool.IsChecked && canvasMoveTool.IsChecked == true)
            //{

            //}
            ToolItem toolItem = ToolManager.GetInstance().Tools.Find(item => item.IsSelected);
            if (e.LeftButton == MouseButtonState.Pressed && null != toolItem)
            {
                Point nowMovingPoint = e.GetPosition(drawCanvas);
                if (toolItem.IsDrawShape && mouseLeftButtonDownPoint != null)
                {
                    if (toolItem.ToolType == ToolType.StraightLine)
                    {                        
                        DrawLine(nowMovingPoint);
                    }
                    else if (toolItem.ToolType == ToolType.LShapeLine)
                    {
                        DrawLLine(nowMovingPoint);                        
                    }
                    else if (toolItem.ControlType == ToolControlType.ToggleButton)
                    {
                        DrawToggleButton(nowMovingPoint, toolItem.ToolType.ToString() + "Style");
                    }
                    else if (toolItem.ControlType == ToolControlType.Label)
                    {
                        DrawLabel(nowMovingPoint, toolItem.ToolType.ToString() + "Style");
                    }
                }

                if (toolItem.ToolType == ToolType.CanvasMove)
                {
                    if (drawCanvas.Scale > 1)
                    {
                        Point offsetPoint = new Point();
                        offsetPoint.X = -(nowMovingPoint.X - ((Point)mouseLeftButtonDownPoint).X);
                        offsetPoint.Y = -(nowMovingPoint.Y - ((Point)mouseLeftButtonDownPoint).Y);
                        Point limitPoint = new Point(offsetPoint.X + canvasMoveTempPoint.X, offsetPoint.Y + canvasMoveTempPoint.Y);


                        if (limitPoint.X < 0 && limitPoint.Y < 0)
                        {
                            drawCanvas.Offset = new Point(0, 0);
                        }

                        drawCanvas.Offset = limitPoint;
                    }
                }
            }

        }

        private void DrawCanvas_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            canvasMoveTempPoint = drawCanvas.Offset;

            Point mouseUpPoint = e.GetPosition(drawCanvas);

            ToolItem toolItem = ToolManager.GetInstance().Tools.Find(item => item.IsSelected);
            if (toolItem != null && toolItem.IsDrawShape)
            {

                string styleName = GetToolStyleName(toolItem.ToolType, mouseUpPoint);
                if (toolItem.ControlType == ToolControlType.ToggleButton && tempToggleButton != null)
                {
                    SaveToggleButton(styleName);
                }
                else if (toolItem.ControlType == ToolControlType.Label&&tempLabel!=null)
                {
                    SaveTrackLabel(styleName);
                }
                else if (toolItem.ControlType==ToolControlType.Line&&tempLine!=null)
                {
                    SaveLine();
                }
                else if (toolItem.ControlType==ToolControlType.Polyline&&tempLLinePolyline!=null)
                {
                    SaveLShapeLine();
                }
            }

            mouseLeftButtonDownPoint = null;
        }

        private void DrawLLine(Point nowMovingPoint)
        {
            if (null != tempLLinePolyline)
            {
                drawCanvas.Children.Remove(tempLLinePolyline);
            }

            Point positionPoint = (Point)mouseLeftButtonDownPoint;

            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;

            Point topLeftPoint = GetElementTopLeftPointInCanvas(positionPoint, nowMovingPoint);
            Point relativeStart = new Point(Math.Abs(positionPoint.X - topLeftPoint.X), Math.Abs(positionPoint.Y - topLeftPoint.Y));
            Point relativeEnd = new Point(Math.Abs(nowMovingPoint.X - topLeftPoint.X), Math.Abs(nowMovingPoint.Y - topLeftPoint.Y));
           

            Point middlePoint =new Point(relativeEnd.X, relativeStart.Y);
           

            var stroke = this.TryFindResource("Shape.Line.Color") as SolidColorBrush;

            tempLLinePolyline = CreateXamlPolyline(stroke, 2, relativeStart, middlePoint, relativeEnd);
            drawCanvas.Children.Add(tempLLinePolyline);
            Canvas.SetLeft(tempLLinePolyline, topLeftPoint.X);
            Canvas.SetTop(tempLLinePolyline, topLeftPoint.Y);

        }

        private void DrawLine(Point nowMovingPoint)
        {
            if (null!= tempLine)
            {
                drawCanvas.Children.Remove(tempLine);
            }

            Point positionPoint = (Point)mouseLeftButtonDownPoint;

            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;

            Point topLeftPoint = GetElementTopLeftPointInCanvas(positionPoint,nowMovingPoint);
            Point relativeStart = new Point(Math.Abs(positionPoint.X - topLeftPoint.X), Math.Abs(positionPoint.Y - topLeftPoint.Y));
            Point relativeEnd = new Point(Math.Abs(nowMovingPoint.X - topLeftPoint.X), Math.Abs(nowMovingPoint.Y - topLeftPoint.Y));

            var stroke=this.TryFindResource("Shape.Line.Color") as SolidColorBrush;
            tempLine = CreateXamlLine(stroke, 2, relativeStart, relativeEnd);
            drawCanvas.Children.Add(tempLine);
            Canvas.SetLeft(tempLine, topLeftPoint.X);
            Canvas.SetTop(tempLine, topLeftPoint.Y);

        }

        private Point GetElementTopLeftPointInCanvas(Point positionPoint, Point nowMovingPoint)
        {
            Point topLeftPoint = new Point();
            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;

            if (xOffset>=0&&yOffset>=0)
            {
                topLeftPoint = new Point(positionPoint.X,positionPoint.Y);
            }
            else if (xOffset>=0&&yOffset<0)
            {
                topLeftPoint = new Point(positionPoint.X, nowMovingPoint.Y);
            }
            else if (xOffset<0&&yOffset<=0)
            {
                topLeftPoint = new Point(nowMovingPoint.X, nowMovingPoint.Y);
            }
            else if (xOffset<0&&yOffset>0)
            {
                topLeftPoint = new Point(nowMovingPoint.X, positionPoint.Y);
            }

            return topLeftPoint;
        }

        private void DrawLabel(Point nowMovingPoint, string styleName)
        {
            if (null != tempLabel)
            {
                drawCanvas.Children.Remove(tempLabel);
            }

            Point positionPoint = (Point)mouseLeftButtonDownPoint;

            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;

            StringBuilder xamlUIElementBuilder = new StringBuilder();
            xamlUIElementBuilder.Append("<Label xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' ");
            xamlUIElementBuilder.Append("Style='{ DynamicResource " + styleName + "}' ");
            xamlUIElementBuilder.Append("Background='Transparent' BorderThickness='0' IsHitTestVisible='false' ");
            xamlUIElementBuilder.Append("Width='" + Math.Abs(xOffset) + "' ");
            xamlUIElementBuilder.Append("Height='" + Math.Abs(yOffset) + "'/>");
            tempLabel = XamlReader.Parse(xamlUIElementBuilder.ToString()) as Label;

            drawCanvas.Children.Add(tempLabel);
            SetElementInCanvas(tempLabel, xOffset, yOffset, positionPoint, nowMovingPoint);
        }

        private void DrawToggleButton(Point nowMovingPoint, string styleName)
        {
            if (tempToggleButton != null)
            {
                drawCanvas.Children.Remove(tempToggleButton);
            }

            Point positionPoint = (Point)mouseLeftButtonDownPoint;

            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;

            StringBuilder xamlUIElementBuilder = new StringBuilder();
            xamlUIElementBuilder.Append("<ToggleButton xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' ");
            xamlUIElementBuilder.Append("Style='{ DynamicResource " + styleName + "}' ");
            xamlUIElementBuilder.Append("Background='Transparent' BorderThickness='0' IsHitTestVisible='false' ");
            xamlUIElementBuilder.Append("Width='" + Math.Abs(xOffset) + "' ");
            xamlUIElementBuilder.Append("Height='" + Math.Abs(yOffset) + "'/>");
            tempToggleButton = XamlReader.Parse(xamlUIElementBuilder.ToString()) as ToggleButton;
            drawCanvas.Children.Add(tempToggleButton);

            SetElementInCanvas(tempToggleButton, xOffset, yOffset, positionPoint, nowMovingPoint);
        }

        private void SetElementInCanvas(UIElement tempToggleButton, double xOffset, double yOffset, Point positionPoint, Point nowMovingPoint)
        {
            if (xOffset >= 0 && yOffset >= 0)
            {
                Canvas.SetLeft(tempToggleButton, positionPoint.X);
                Canvas.SetTop(tempToggleButton, positionPoint.Y);
            }
            else if (xOffset >= 0 && yOffset <= 0)
            {
                Canvas.SetLeft(tempToggleButton, positionPoint.X);
                Canvas.SetTop(tempToggleButton, nowMovingPoint.Y);
            }
            else if (xOffset <= 0 && yOffset >= 0)
            {
                Canvas.SetLeft(tempToggleButton, nowMovingPoint.X);
                Canvas.SetTop(tempToggleButton, positionPoint.Y);
            }
            else if (xOffset <= 0 && yOffset <= 0)
            {
                Canvas.SetLeft(tempToggleButton, nowMovingPoint.X);
                Canvas.SetTop(tempToggleButton, nowMovingPoint.Y);
            }
        }
        private string GetStraightConnectionLineStyleName(Point nowMovingPoint)
        {
            Point positionPoint = (Point)mouseLeftButtonDownPoint;

            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;
            string styleName = string.Empty;

            if (xOffset >= 0 && yOffset >= 0)
            {
                styleName = "BottomRightLineLabelStyle";
            }
            else if (xOffset >= 0 && yOffset <= 0)
            {
                styleName = "TopRightLineLabelStyle";
            }
            else if (xOffset <= 0 && yOffset >= 0)
            {
                styleName = "TopRightLineLabelStyle";
            }
            else if (xOffset <= 0 && yOffset <= 0)
            {
                styleName = "BottomRightLineLabelStyle";
            }

            return styleName;
        }

        private string GetLConnectionLineStyleName(Point nowMovingPoint)
        {
            Point positionPoint = (Point)mouseLeftButtonDownPoint;

            double xOffset = nowMovingPoint.X - positionPoint.X;
            double yOffset = nowMovingPoint.Y - positionPoint.Y;
            string styleName = string.Empty;

            if (xOffset >= 0 && yOffset >= 0)
            {
                styleName = "TRLConnectionLineLabelStyle";
            }
            else if (xOffset >= 0 && yOffset <= 0)
            {
                styleName = "BRLConnectionLineLabelStyle";
            }
            else if (xOffset <= 0 && yOffset >= 0)
            {
                styleName = "TLLConnectionLineLabelStyle";
            }
            else if (xOffset <= 0 && yOffset <= 0)
            {
                styleName = "BLLConnectionLineLabelStyle";
            }

            return styleName;
        }

        #region Add element Name
        private void AddElementName()
        {
            nameInputTextBox = new TextBox();
            nameInputTextBox.LostFocus += NameInputTextBox_LostFocus;
            nameInputTextBox.KeyDown += NameInputTextBox_KeyDown;
            nameInputTextBox.Width = 100;
            nameInputTextBox.Height = 22;
            drawCanvas.Children.Add(nameInputTextBox);
            double left = Canvas.GetLeft(selectedUIElement);
            double top = Canvas.GetTop(selectedUIElement);
            Canvas.SetLeft(nameInputTextBox, left);
            Canvas.SetTop(nameInputTextBox, top - 30);

        }

        private void NameInputTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter || e.Key == Key.Tab)
            {
                drawCanvas.Focus();
            }
        }

        private void NameInputTextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            if (null != selectedUIElement)
            {
                if (selectedUIElement is ToggleButton)
                {
                    var element = selectedUIElement as ToggleButton;

                    element.Content = nameInputTextBox.Text;
                    if (!string.IsNullOrEmpty(nameInputTextBox.Text))
                    {
                        TextBlock textBlock = new TextBlock();
                        textBlock.Foreground = Brushes.LightGreen;//cffdc9
                        textBlock.IsHitTestVisible = false;
                        textBlock.Text = nameInputTextBox.Text;
                        drawCanvas.Children.Add(textBlock);
                        double left = Canvas.GetLeft(selectedUIElement);
                        double top = Canvas.GetTop(selectedUIElement);
                        Canvas.SetLeft(textBlock, left);
                        Canvas.SetTop(textBlock, top - textBlock.FontSize - 4);
                    }

                }
            }

            if (null != nameInputTextBox)
            {
                drawCanvas.Children.Remove(nameInputTextBox);
                nameInputTextBox = null;
            }
        }
        #endregion

        /// <summary>
        /// 修改页面元素大小，位置
        /// </summary>
        /// <param name="point">拖拽点</param>
        private void ModifyElement(Point point)
        {
            bool IsSelectedUIElement = false;
            var children=LogicalTreeHelper.GetChildren(drawCanvas);
            foreach (FrameworkElement item in children)
            {
                var startPoint = new Point(Canvas.GetLeft(item), Canvas.GetTop(item));
                if (IsClickInUIElement(point, item))
                {
                    IsSelectedUIElement = true;
                    ClearResizeMoveAdorner();
                    resizeMoveAdorner = new ResizeMoveAdorner(item);
                    selectedUIElement = item;
                    drawCanvasAdornerLayer.Add(resizeMoveAdorner);
                    break;
                }
            }

            if (!IsSelectedUIElement)
            {
                ClearResizeMoveAdorner();
            }
        }

        /// <summary>
        /// 点击点是否在元素内
        /// </summary>
        /// <param name="point"></param>
        /// <param name="element"></param>
        /// <returns></returns>
        private bool IsClickInUIElement(Point point, FrameworkElement element)
        {
            
            //element.RenderSize.

            if (point.X >= Canvas.GetLeft(element) && point.X <= Canvas.GetLeft(element) + element.RenderSize.Width && point.Y >= Canvas.GetTop(element) && point.Y <= Canvas.GetTop(element) + element.RenderSize.Height)
            {
                return true;
            }
            else if (element is Line)
            {
                var line = element as Line;
                if (line.RenderedGeometry.Bounds.Contains(point))
                {
                    return true;
                }
            }
            else if (element is Polyline)
            {
                var polyLine = element as Polyline;
                if (polyLine.RenderedGeometry.Bounds.Contains(point))
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// 当前画板清除修改元素装饰器
        /// </summary>
        private void ClearResizeMoveAdorner()
        {
            if (null != resizeMoveAdorner)
            {
                selectedUIElement = null;
                drawCanvasAdornerLayer.Remove(resizeMoveAdorner);
            }
        }

        private Line CreateXamlLine(SolidColorBrush stroke,int strokeThickness,Point start,Point end)
        {
            StringBuilder xamlUIElementBuilder = new StringBuilder();
            xamlUIElementBuilder.Append("<Line xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' ");
            xamlUIElementBuilder.Append("IsHitTestVisible='false' ");
            xamlUIElementBuilder.Append("Stroke='" + stroke + "' ");
            xamlUIElementBuilder.Append("Stretch='Fill' ");
            xamlUIElementBuilder.Append("StrokeThickness='"+ strokeThickness + "' ");
            xamlUIElementBuilder.Append("X1='" + start.X + "' ");
            xamlUIElementBuilder.Append("Y1='" + start.Y + "' ");

            xamlUIElementBuilder.Append("X2='" + end.X + "' ");
            xamlUIElementBuilder.Append("Y2='" + end.Y + "' />");

            var line= XamlReader.Parse(xamlUIElementBuilder.ToString()) as Line;
            return line;
        }

        private Polyline CreateXamlPolyline(SolidColorBrush stroke,int strokeThickness,Point start,Point middle,Point end)
        {
            StringBuilder xamlUIElementBuilder = new StringBuilder();
            xamlUIElementBuilder.Append("<Polyline xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' ");
            xamlUIElementBuilder.Append("IsHitTestVisible='false' ");
            xamlUIElementBuilder.Append("Stroke='" + stroke + "' ");
            xamlUIElementBuilder.Append("Stretch='Fill' ");
            xamlUIElementBuilder.Append("StrokeThickness='"+strokeThickness+"' ");
            xamlUIElementBuilder.Append("FillRule='EvenOdd'>");
            xamlUIElementBuilder.Append("<Polyline.Points>");

            xamlUIElementBuilder.Append("<Point ");
            xamlUIElementBuilder.Append("X='" + start.X + "' ");
            xamlUIElementBuilder.Append("Y='" + start.Y + "'/>");

            xamlUIElementBuilder.Append("<Point ");
            xamlUIElementBuilder.Append("X='" + middle.X + "' ");
            xamlUIElementBuilder.Append("Y='" + middle.Y + "'/>");

            xamlUIElementBuilder.Append("<Point ");
            xamlUIElementBuilder.Append("X='" + end.X + "' ");
            xamlUIElementBuilder.Append("Y='" + end.Y + "'/>");

            xamlUIElementBuilder.Append("</Polyline.Points>");

            xamlUIElementBuilder.Append("</Polyline>");

            var lline = XamlReader.Parse(xamlUIElementBuilder.ToString()) as Polyline;           

            return lline;
        }

        private void SaveLShapeLine()
        {
            var stroke = this.TryFindResource("Shape.Line.Color") as SolidColorBrush;
            var finalLShapeLine = CreateXamlPolyline(stroke, 2, tempLLinePolyline.Points[0], tempLLinePolyline.Points[1], tempLLinePolyline.Points[2]);
            drawCanvas.Children.Add(finalLShapeLine);
            Canvas.SetLeft(finalLShapeLine, Canvas.GetLeft(tempLLinePolyline));
            Canvas.SetTop(finalLShapeLine, Canvas.GetTop(tempLLinePolyline));

            drawCanvas.Children.Remove(tempLLinePolyline);
            tempLLinePolyline = null;
        }

        private void SaveLine()
        {
            var stroke = this.TryFindResource("Shape.Line.Color") as SolidColorBrush;
            var finalLine = CreateXamlLine(stroke, 2, new Point(tempLine.X1, tempLine.Y1), new Point(tempLine.X2, tempLine.Y2));
            drawCanvas.Children.Add(finalLine);
            Canvas.SetLeft(finalLine, Canvas.GetLeft(tempLine));
            Canvas.SetTop(finalLine, Canvas.GetTop(tempLine));

            drawCanvas.Children.Remove(tempLine);
            tempLine = null;

        }

        private void SaveTrackLabel(string styleName)
        {
            var positionPoint = (Point)mouseLeftButtonDownPoint;

            StringBuilder xamlUIElementBuilder = new StringBuilder();
            xamlUIElementBuilder.Append("<Label xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' ");
            xamlUIElementBuilder.Append("Style='{ DynamicResource " + styleName + "}' ");
            xamlUIElementBuilder.Append("Background='Transparent' BorderThickness='0' IsHitTestVisible='false' ");
            xamlUIElementBuilder.Append("Width='" + tempLabel.Width + "' ");
            xamlUIElementBuilder.Append("Height='" + tempLabel.Height + "'/>");
            Label finalLabel = XamlReader.Parse(xamlUIElementBuilder.ToString()) as Label;
          
            drawCanvas.Children.Add(finalLabel);
            Canvas.SetLeft(finalLabel, Canvas.GetLeft(tempLabel));
            Canvas.SetTop(finalLabel, Canvas.GetTop(tempLabel));

            drawCanvas.Children.Remove(tempLabel);
            tempLabel = null;
        }

        private void SaveToggleButton(string styleName)
        {
            var positionPoint = (Point)mouseLeftButtonDownPoint;

            StringBuilder xamlUIElementBuilder = new StringBuilder();
            xamlUIElementBuilder.Append("<ToggleButton xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' ");
            xamlUIElementBuilder.Append("Style='{ DynamicResource " + styleName + "}' ");
            xamlUIElementBuilder.Append("Background='Transparent' BorderThickness='0' IsHitTestVisible='false' ");
            xamlUIElementBuilder.Append("Width='" + tempToggleButton.Width + "' ");
            xamlUIElementBuilder.Append("Height='" + tempToggleButton.Height + "'/>");
            ToggleButton finalToggleButton = XamlReader.Parse(xamlUIElementBuilder.ToString()) as ToggleButton;
            drawCanvas.Children.Add(finalToggleButton);
            Canvas.SetLeft(finalToggleButton, Canvas.GetLeft(tempToggleButton));
            Canvas.SetTop(finalToggleButton, Canvas.GetTop(tempToggleButton));

            drawCanvas.Children.Remove(tempToggleButton);
            tempToggleButton = null;
        }

        private string GetToolStyleName(ToolType toolType, Point nowMovingPoint)
        {
            string styleName = string.Empty;
            if (toolType == ToolType.StraightLine|| toolType == ToolType.LShapeLine)
            {
               //没有用到资源
            }
            else
            {
                styleName = toolType.ToString() + "Style";
            }

            return styleName;
        }

        private void drawCanvas_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Delete && null != selectedUIElement)
            {
                drawCanvas.Children.Remove(selectedUIElement);
                selectedUIElement = null;
            }

            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Control) == ModifierKeys.Control && e.Key == Key.C)
            {
                if (null != selectedUIElement)
                {
                    string copyedObj = XamlWriter.Save(selectedUIElement);
                    Clipboard.SetDataObject(copyedObj);
                }
            }

            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Control) == ModifierKeys.Control && e.Key == Key.V)
            {
                string graphicText = string.Empty;

                IDataObject iData = Clipboard.GetDataObject();

                if (iData.GetDataPresent(DataFormats.Text))
                {
                    graphicText = (String)iData.GetData(DataFormats.Text);
                }
                if (!string.IsNullOrEmpty(graphicText))
                {
                    PasteGraphic(graphicText);
                }
            }
        }

        public void PasteGraphic(string graphic)
        {
            FrameworkElement copyedElement = XamlReader.Parse(graphic) as FrameworkElement;
            if (null != copyedElement)
            {
                drawCanvas.Children.Add(copyedElement);
                double left = Canvas.GetLeft(selectedUIElement);
                double top = Canvas.GetTop(selectedUIElement);
                Canvas.SetLeft(copyedElement, left + 8);
                Canvas.SetTop(copyedElement, top + 8);

                ClearResizeMoveAdorner();
                resizeMoveAdorner = new ResizeMoveAdorner(copyedElement);
                selectedUIElement = copyedElement;
                drawCanvasAdornerLayer.Add(resizeMoveAdorner);
            }
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            drawCanvasAdornerLayer = AdornerLayer.GetAdornerLayer(this.drawCanvas);
        }

        private void UserControl_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Delete && null != selectedUIElement)
            {
                drawCanvas.Children.Remove(selectedUIElement);
                selectedUIElement = null;
            }

            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Control) == ModifierKeys.Control && e.Key == Key.C)
            {
                if (null != selectedUIElement)
                {
                    copyedUIElementString = XamlWriter.Save(selectedUIElement);
                }
            }

            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Control) == ModifierKeys.Control && e.Key == Key.V)
            {
                if (!string.IsNullOrEmpty(copyedUIElementString))
                {
                    FrameworkElement copyedElement = XamlReader.Parse(copyedUIElementString) as FrameworkElement;
                    drawCanvas.Children.Add(copyedElement);
                    double left = Canvas.GetLeft(selectedUIElement);
                    double top = Canvas.GetTop(selectedUIElement);
                    Canvas.SetLeft(copyedElement, left + 8);
                    Canvas.SetTop(copyedElement, top + 8);

                    ClearResizeMoveAdorner();
                    resizeMoveAdorner = new ResizeMoveAdorner(copyedElement);
                    selectedUIElement = copyedElement;
                    drawCanvasAdornerLayer.Add(resizeMoveAdorner);
                }
            }
        }

        public void ExecuteCommand(string commandType)
        {
            switch (commandType)
            {
                case "ZoomOut":
                    drawCanvas.Scale += 0.2;
                    break;
                case "ZoomIn":
                    if (drawCanvas.Scale > 1.2)
                    {
                        drawCanvas.Scale -= 0.2;
                    }
                    break;
                case "ZoomRestore":
                    drawCanvas.Scale = 1;
                    drawCanvas.Offset = new Point(0, 0);
                    break;
                case "Copy":
                    if (null != selectedUIElement)
                    {
                        string copyObj = string.Empty;
                        copyObj = XamlWriter.Save(selectedUIElement);
                        Clipboard.SetDataObject(copyObj);
                    }
                    break;
                case "Delete":
                    if (null != selectedUIElement)
                    {
                        drawCanvas.Children.Remove(selectedUIElement);
                        selectedUIElement = null;
                    }
                    break;
                case "Paste":
                    string graphicText = string.Empty;

                    IDataObject iData = Clipboard.GetDataObject();

                    if (iData.GetDataPresent(DataFormats.Text))
                    {
                        graphicText = (String)iData.GetData(DataFormats.Text);
                    }
                    if (!string.IsNullOrEmpty(graphicText))
                    {
                        PasteGraphic(graphicText);
                    }
                    break;
                default:
                    break;
            }
        }

        public ScrollViewer SaveGraphic()
        {
            return drawCanvasParent;
        }

        public void ImportFile(ScrollViewer scrollviewer)
        {
            userControlGrid.Children.Clear();
            userControlGrid.Children.Add(scrollviewer);

        }
    }
}
