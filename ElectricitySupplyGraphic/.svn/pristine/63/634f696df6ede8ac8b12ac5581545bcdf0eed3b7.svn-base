<UserControl x:Class="MetroStopStation.GraphicPanelControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MetroStopStation"
             mc:Ignorable="d" 
             xmlns:swc="clr-namespace:System.Windows.Controls;assembly=FrameWorkExtension" 
             d:DesignHeight="300" d:DesignWidth="300" Loaded="UserControl_Loaded" KeyDown="UserControl_KeyDown">
    <UserControl.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

        <SolidColorBrush x:Key="Shape.Line.Color" Color="#A95400"/>


        <Style x:Key="SwitchStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" >
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Path x:Name="facePath"  Stretch="Fill" Fill="Transparent" Stroke="Green" StrokeThickness="2" HorizontalAlignment="Left">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="0,100" EndPoint="40,100"/>
                                            <EllipseGeometry Center="80,100" RadiusX="40" RadiusY="40"/>
                                            <LineGeometry StartPoint="120,100" EndPoint="180,40"/>
                                            <LineGeometry StartPoint="220,40" EndPoint="220,160"/>
                                            <LineGeometry StartPoint="220,100" EndPoint="280,100"/>
                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>
                                <Path x:Name="pressedFacePath" Visibility="Collapsed" Stretch="Fill" Fill="Transparent" Stroke="Red" StrokeThickness="2" HorizontalAlignment="Left">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="0,100" EndPoint="40,100"/>
                                            <EllipseGeometry Center="80,100" RadiusX="40" RadiusY="40"/>
                                            <LineGeometry  StartPoint="120,100" EndPoint="220,100"/>
                                            <LineGeometry StartPoint="220,40" EndPoint="220,160"/>
                                            <LineGeometry StartPoint="220,100" EndPoint="280,100"/>
                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>
                            </Grid>
                        </Border>



                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>

                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="pressedFacePath" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="facePath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="GroundSwitchStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Path x:Name="facePath"  Stretch="Fill" Fill="Transparent" Stroke="Green" StrokeThickness="2" HorizontalAlignment="Left">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="0,100" EndPoint="40,100"/>
                                            <EllipseGeometry Center="80,100" RadiusX="40" RadiusY="40"/>
                                            <LineGeometry StartPoint="120,100" EndPoint="180,40"/>
                                            <LineGeometry StartPoint="220,40" EndPoint="220,160"/>
                                            <LineGeometry StartPoint="250,60" EndPoint="250,140"/>
                                            <LineGeometry StartPoint="280,80" EndPoint="280,120"/>
                                            <!--<LineGeometry StartPoint="220,100" EndPoint="280,100"></LineGeometry>-->
                                        </GeometryGroup>
                                    </Path.Data>
                                    <Path.LayoutTransform>
                                        <RotateTransform CenterX="140" CenterY="110" Angle="90"></RotateTransform>
                                    </Path.LayoutTransform>
                                </Path>
                                <Path x:Name="pressedFacePath" Visibility="Collapsed" Stretch="Fill" Fill="Transparent" Stroke="Red" StrokeThickness="2" HorizontalAlignment="Left">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="0,100" EndPoint="40,100"/>
                                            <EllipseGeometry Center="80,100" RadiusX="40" RadiusY="40"/>
                                            <LineGeometry  StartPoint="120,100" EndPoint="220,100"/>
                                            <LineGeometry StartPoint="220,40" EndPoint="220,160"/>
                                            <LineGeometry StartPoint="250,60" EndPoint="250,140"/>
                                            <LineGeometry StartPoint="280,80" EndPoint="280,120"/>
                                            <!--<LineGeometry StartPoint="220,100" EndPoint="280,100"></LineGeometry>-->
                                        </GeometryGroup>
                                    </Path.Data>
                                    <Path.LayoutTransform>
                                        <RotateTransform CenterX="140" CenterY="110" Angle="90"></RotateTransform>
                                    </Path.LayoutTransform>
                                </Path>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="pressedFacePath" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="facePath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="PlatDoorStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" Visibility="Collapsed" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                                <Path x:Name="facePath"  Stretch="Fill" Fill="Green" Stroke="Green" StrokeThickness="1" SnapsToDevicePixels="True">
                                    <Path.Data>
                                        <GeometryGroup FillRule="Nonzero">
                                            <RectangleGeometry Rect="12,0,6,8"/>
                                            <RectangleGeometry Rect="13.5,8,3,5"/>
                                            <PathGeometry Figures="M16,13 A10,10,0,0,1,26,23 A10,10,0,0,0,16,13"/>
                                            <RectangleGeometry Rect="13.5,24,13,1"/>
                                            <RectangleGeometry Rect="13.5,25,3,5"/>
                                            <RectangleGeometry Rect="12,30,6,8"/>
                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>


                                <Path x:Name="pressedFacePath" Visibility="Collapsed" Stretch="Fill" Fill="Red" Stroke="Red" StrokeThickness="1" HorizontalAlignment="Left">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <RectangleGeometry Rect="120,0,60,80"/>
                                            <RectangleGeometry Rect="135,80,30,50"/>
                                            <RectangleGeometry Rect="145,130,10,120"/>
                                            <LineGeometry StartPoint="190,140" EndPoint="260,220"/>
                                            <LineGeometry StartPoint="260,140" EndPoint="190,220"/>
                                            <RectangleGeometry Rect="135,250,30,50"/>
                                            <RectangleGeometry Rect="120,300,60,80"/>
                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>

                            </Grid>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="pressedFacePath" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="facePath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ElectricConfirmStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>

                                <Path Name="facePath" Stroke="Green" StrokeThickness="2" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Top">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="6,0" EndPoint="8,2"></LineGeometry>
                                            <LineGeometry StartPoint="8,2" EndPoint="4,2"></LineGeometry>
                                            <LineGeometry StartPoint="4,2" EndPoint="6,0"></LineGeometry>
                                            <LineGeometry StartPoint="6,2" EndPoint="6,5"></LineGeometry>
                                            <PathGeometry>
                                                <PathFigure StartPoint="0,8">
                                                    <ArcSegment Point="12,8" Size="8,8" IsLargeArc="False" SweepDirection="Clockwise"></ArcSegment>
                                                </PathFigure>
                                            </PathGeometry>
                                            <LineGeometry StartPoint="1,7" EndPoint="3,8"></LineGeometry>
                                            <LineGeometry StartPoint="6,5" EndPoint="6,7"></LineGeometry>
                                            <LineGeometry StartPoint="11,7" EndPoint="9,8"></LineGeometry>

                                            <LineGeometry StartPoint="3,9" EndPoint="6,12"></LineGeometry>
                                            <EllipseGeometry Center="6,13" RadiusX="1" RadiusY="1"></EllipseGeometry>

                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>

                                <Path Name="pressedFacePath" Visibility="Collapsed" Stroke="Red" StrokeThickness="1" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Top">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="6,0" EndPoint="8,2"></LineGeometry>
                                            <LineGeometry StartPoint="8,2" EndPoint="4,2"></LineGeometry>
                                            <LineGeometry StartPoint="4,2" EndPoint="6,0"></LineGeometry>
                                            <LineGeometry StartPoint="6,2" EndPoint="6,5"></LineGeometry>
                                            <PathGeometry>
                                                <PathFigure StartPoint="0,8">
                                                    <ArcSegment Point="12,8" Size="8,8" IsLargeArc="False" SweepDirection="Clockwise"></ArcSegment>
                                                </PathFigure>
                                            </PathGeometry>
                                            <LineGeometry StartPoint="1,7" EndPoint="3,8"></LineGeometry>
                                            <LineGeometry StartPoint="6,5" EndPoint="6,7"></LineGeometry>
                                            <LineGeometry StartPoint="11,7" EndPoint="9,8"></LineGeometry>

                                            <LineGeometry StartPoint="6,9" EndPoint="6,12"></LineGeometry>
                                            <EllipseGeometry Center="6,13" RadiusX="1" RadiusY="1"></EllipseGeometry>

                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" TargetName="pressedFacePath" Value="Visible"/>
                                <Setter Property="Visibility" TargetName="facePath" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TrackIDStyle" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="0,2"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">

                                <Path Stroke="Orange" Fill="LightSeaGreen" StrokeThickness="2" Stretch="Fill" Data="M0,20 L15,0 L65,0 L80,20 L65,40 L15,40Z">

                                </Path>
                                <ContentPresenter  VerticalAlignment="Center" HorizontalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="LineBreakerStyle" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Black"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Black" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <Grid>
                                <ContentPresenter Visibility="Collapsed" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Path Stroke="Green" StrokeThickness="2" Stretch="Fill">
                                    <Path.Data>
                                        <GeometryGroup>
                                            <LineGeometry StartPoint="0,0" EndPoint="0,30"></LineGeometry>
                                            <LineGeometry StartPoint="15,0" EndPoint="15,30"></LineGeometry>
                                            <LineGeometry StartPoint="30,0" EndPoint="30,30"></LineGeometry>
                                        </GeometryGroup>
                                    </Path.Data>
                                </Path>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TrackLineStyle" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="#A95400"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="#A95400" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <Grid>
                                <ContentPresenter Visibility="Collapsed" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Path Stroke="#D17500" StrokeThickness="4" Stretch="Fill" Data="M0,0 L100,0" StrokeDashArray="4 3"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid Name="userControlGrid">
        <ScrollViewer Name="drawCanvasParent" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
            <swc:ZoomableCanvas  Name="drawCanvas" Background="Black" Focusable="True" IsVirtualizing="False" ClipToBounds="False"  MouseLeftButtonDown="DrawCanvas_MouseLeftButtonDown" MouseMove="DrawCanvas_MouseMove" MouseLeftButtonUp="DrawCanvas_MouseLeftButtonUp" KeyDown="drawCanvas_KeyDown" MouseEnter="drawCanvas_MouseEnter" MouseLeave="drawCanvas_MouseLeave">
               
            </swc:ZoomableCanvas>
        </ScrollViewer>
    </Grid>
</UserControl>
